{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// // Getting started\n// console.log(\"Hello World\");\n\n// // Data Types\n\n// // String\n// let name = \"Ali\";\n\n// // Number\n// let age = 20;\n\n// // Boolean\n// let isMarried = false;\n\n// // Null (does not have any specified value)\n// let empty = null; \n\n// // Undefined (not defined)\n// let unassigned;    // unassigned is a variable which does not have assigned value\n\n\n// // Template Litrals\n// var greet = \"Hello \"+ name;\n// console.log(greet); \n\n\n// // Analyzing model types\n// console.log(typeof name);\n// console.log(typeof age);\n// console.log(typeof isMarried);\n// console.log(typeof empty);\n// console.log(typeof unassigned);\n\n// let a = 2; \n// console.log(a);\n// a = \"Two\"; //Error\n// console.log(a);\n\n\n// https://github.com/panaverse/typescript-node-projects/blob/main/getting-started-exercises.md\n\n// 1. Setup TypeScript environment\n\n// 2. Personal Message: Store a person\u2019s name in a variable, and print a message to that person. Your message should be simple, such as, \u201CHello Eric, would you like to learn some Python today?\u201D\n\nlet Name: string = \"Mahad\";\nconsole.log(`Hello ${Name}`);\n\n// 3. Name Cases: Store a person\u2019s name in a variable, and then print that person\u2019s name in lowercase, uppercase, and titlecase.\n\nconsole.log(`Name : ${ Name }`);\nconsole.log(`Name in uppercase : ${ Name.toUpperCase() }`);\nconsole.log(`Name in lowercase: ${ Name.toLowerCase() }`);\n\n// 4. Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:\n\n// Albert Einstein once said, \u201CA person who never made a mistake never tried anything new.\u201D\n\nconsole.log('Albert Einstein once said, \\\"Only a life lived for others is a life worthwhile.\\\"');\n\n// 5. Famous Quote 2: Repeat Exercise 4, but this time store the famous person\u2019s name in a variable called famous_person. Then compose your message and store it in a new variable called message. Print your message.\n\nlet famous_person: string = \"Albert Einstein\";\nlet message: string = \"Try not to become a man of success. Rather become a man of value.\";\n\nconsole.log(`${ famous_person } once said, \"${ message }\"`);\n\n// 6. Stripping Names: Store a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name after striping the white spaces.\n\nlet FullName: string = \"\\tMahad Ahmed\\n\";\nconsole.log(FullName);\n\nconsole.log(FullName.trim());\n\n// 7. Number Eight: Write addition, subtraction, multiplication, and division operations that each result in the number 8. Be sure to enclose your operations in print statements to see the results.\n\n// 8. You should create four lines that look like this:\n// console.log(5 + 3)\n// Your output should simply be four lines with the number 8 appearing once on each line.\n\nconsole.log(4 + 4);\nconsole.log(9 - 1);\nconsole.log(2 * 4);\nconsole.log(16 / 2);\n\n// 9. Favorite Number: Store your favorite number in a variable. Then, using that variable, create a message that reveals your favorite number. Print that message.\n\nlet fav_number: number = 8;\nconsole.log(`My favourite number is ${ fav_number }`);\n\n// 10. Adding Comments: Choose two of the programs you\u2019ve written, and add at least one comment to each. If you don\u2019t have anything specific to write because your programs are too simple at this point, just add your name and the current date at the top of each program file. Then write one sentence describing what the program does.\n\n// This is a single line comment in TypeScript/JavaScript\n/* This is a multi line \n    comment in TypeScript/JavaScript */\n\n// 11. Names: Store the names of a few of your friends in a array called names. Print each person\u2019s name by accessing each element in the list, one at a time.\n\nlet Names: string[] = [\"Ali\", \"Haris\"];\nconsole.log(`Name 1 : ${ Names[0] }`);\nconsole.log(`Name 2 : ${ Names[1] }`);\n\n// 12. Greetings: Start with the array you used in Exercise 11, but instead of just printing each person\u2019s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person\u2019s name.\n\nNames.forEach(name => {\n   console.log(`Hello ${ name }`); \n});\n\n// 13. Your Own Array: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201CI would like to own a Honda motorcycle.\u201D\n\nlet transports: string[] = [\"Honda motercycle\", \"Honda motorcar\"];\ntransports.forEach(name => {\n   console.log(`I would like to own a ${ name }.`); \n});\n\n// 14. Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you\u2019d like to invite to dinner. Then use your list to print a message to each person, inviting them to dinner.\n\nlet guests: string[] = [\"Ali\", \"Hamza\", \"Haris\"];\nguests.forEach(name => {\n   console.log(`Dear ${ name }, I would like to our dinner.`); \n});\n\n// 15. Changing Guest List: You just heard that one of your guests can\u2019t make the dinner, so you need to send out a new set of invitations. You\u2019ll have to think of someone else to invite.\n\nguests[1] = \"Talha\";\n\nguests.forEach(name => {\n   console.log(`Dear ${ name }, I would like to our dinner.`); \n});\n\n"],
  "mappings": ";AA6CA,IAAI,OAAe;AACnB,QAAQ,IAAI,SAAS,MAAM;AAI3B,QAAQ,IAAI,UAAW,MAAO;AAC9B,QAAQ,IAAI,uBAAwB,KAAK,YAAY,GAAI;AACzD,QAAQ,IAAI,sBAAuB,KAAK,YAAY,GAAI;AAMxD,QAAQ,IAAI,iFAAmF;AAI/F,IAAI,gBAAwB;AAC5B,IAAI,UAAkB;AAEtB,QAAQ,IAAI,GAAI,6BAA+B,UAAW;AAI1D,IAAI,WAAmB;AACvB,QAAQ,IAAI,QAAQ;AAEpB,QAAQ,IAAI,SAAS,KAAK,CAAC;AAQ3B,QAAQ,IAAI,IAAI,CAAC;AACjB,QAAQ,IAAI,IAAI,CAAC;AACjB,QAAQ,IAAI,IAAI,CAAC;AACjB,QAAQ,IAAI,KAAK,CAAC;AAIlB,IAAI,aAAqB;AACzB,QAAQ,IAAI,0BAA2B,YAAa;AAUpD,IAAI,QAAkB,CAAC,OAAO,OAAO;AACrC,QAAQ,IAAI,YAAa,MAAM,IAAK;AACpC,QAAQ,IAAI,YAAa,MAAM,IAAK;AAIpC,MAAM,QAAQ,UAAQ;AACnB,UAAQ,IAAI,SAAU,MAAO;AAChC,CAAC;AAID,IAAI,aAAuB,CAAC,oBAAoB,gBAAgB;AAChE,WAAW,QAAQ,UAAQ;AACxB,UAAQ,IAAI,yBAA0B,OAAQ;AACjD,CAAC;AAID,IAAI,SAAmB,CAAC,OAAO,SAAS,OAAO;AAC/C,OAAO,QAAQ,UAAQ;AACpB,UAAQ,IAAI,QAAS,mCAAoC;AAC5D,CAAC;AAID,OAAO,KAAK;AAEZ,OAAO,QAAQ,UAAQ;AACpB,UAAQ,IAAI,QAAS,mCAAoC;AAC5D,CAAC;",
  "names": []
}
